/**
 * ParallelStack RSearch API
 * REST API Specification for ParallelStack RSearch API
 *
 * OpenAPI spec version: 1.3.0
 * Contact: team@parallelstack.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.parallelstack.rsearch;

import com.parallelstack.ApiInvoker;
import com.parallelstack.ApiException;
import com.parallelstack.Pair;

import com.parallelstack.rsearch.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.parallelstack.rsearch.model.AlgorithmFailure;
import com.parallelstack.rsearch.model.AlgorithmSimilarDocsQuery;
import com.parallelstack.rsearch.model.AlgorithmSuccess;
import com.parallelstack.rsearch.model.CreateDocTypeFailure;
import com.parallelstack.rsearch.model.CreateDocTypeSuccess;
import com.parallelstack.rsearch.model.CreateDocumentFailure;
import com.parallelstack.rsearch.model.CreateDocumentSuccess;
import com.parallelstack.rsearch.model.CreateIndexFailure;
import com.parallelstack.rsearch.model.CreateIndexSuccess;
import com.parallelstack.rsearch.model.DeleteDocumentFailure;
import com.parallelstack.rsearch.model.DeleteDocumentSuccess;
import com.parallelstack.rsearch.model.DeleteIndexFailure;
import com.parallelstack.rsearch.model.DeleteIndexSuccess;
import com.parallelstack.rsearch.model.Document;
import com.parallelstack.rsearch.model.DocumentType;
import com.parallelstack.rsearch.model.GetDocTypeFailure;
import com.parallelstack.rsearch.model.GetDocTypeSuccess;
import com.parallelstack.rsearch.model.GetDocTypesFailure;
import com.parallelstack.rsearch.model.GetDocTypesSuccess;
import com.parallelstack.rsearch.model.GetDocumentFailure;
import com.parallelstack.rsearch.model.GetDocumentSuccess;
import com.parallelstack.rsearch.model.GetIndexFailure;
import com.parallelstack.rsearch.model.GetIndexSuccess;
import com.parallelstack.rsearch.model.GetIndexesFailure;
import com.parallelstack.rsearch.model.GetIndexesSuccess;
import com.parallelstack.rsearch.model.IndexesSearchQuery;
import com.parallelstack.rsearch.model.IndexesSuggestQuery;
import com.parallelstack.rsearch.model.SearchFailure;
import com.parallelstack.rsearch.model.SearchQuery;
import com.parallelstack.rsearch.model.SearchSuccess;
import com.parallelstack.rsearch.model.SuggestFailure;
import com.parallelstack.rsearch.model.SuggestQuery;
import com.parallelstack.rsearch.model.SuggestSuccess;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class RsearchApi {
  String basePath = "https://api.parallelstack.com/api/rsearch/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
   * @param indexName Name of the index
   * @param docTypeName Name of the document_type
   * @param docId Document ID
   * @param documentDetails Details of the document
   * @return CreateDocumentSuccess
  */
  public CreateDocumentSuccess addDocument (String indexName, String docTypeName, String docId, Document documentDetails) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = documentDetails;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'indexName' when calling addDocument"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling addDocument"));
    }
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'docId' when calling addDocument"));
    }
    // verify the required parameter 'documentDetails' is set
    if (documentDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentDetails' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'documentDetails' when calling addDocument"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString())).replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateDocumentSuccess) ApiInvoker.deserialize(localVarResponse, "", CreateDocumentSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Creates &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
   * @param indexName Name of the index   * @param docTypeName Name of the document_type   * @param docId Document ID   * @param documentDetails Details of the document
  */
  public void addDocument (String indexName, String docTypeName, String docId, Document documentDetails, final Response.Listener<CreateDocumentSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = documentDetails;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'indexName' when calling addDocument"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling addDocument"));
    }
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'docId' when calling addDocument"));
    }
    // verify the required parameter 'documentDetails' is set
    if (documentDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentDetails' when calling addDocument",
        new ApiException(400, "Missing the required parameter 'documentDetails' when calling addDocument"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString())).replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateDocumentSuccess) ApiInvoker.deserialize(localVarResponse,  "", CreateDocumentSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.
   * @param indexName Name of the index
   * @param docTypeName Name of the document_type
   * @param docTypeDetails Details of the document_type
   * @return CreateDocTypeSuccess
  */
  public CreateDocTypeSuccess addDocumentType (String indexName, String docTypeName, DocumentType docTypeDetails) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = docTypeDetails;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling addDocumentType",
        new ApiException(400, "Missing the required parameter 'indexName' when calling addDocumentType"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling addDocumentType",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling addDocumentType"));
    }
    // verify the required parameter 'docTypeDetails' is set
    if (docTypeDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeDetails' when calling addDocumentType",
        new ApiException(400, "Missing the required parameter 'docTypeDetails' when calling addDocumentType"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateDocTypeSuccess) ApiInvoker.deserialize(localVarResponse, "", CreateDocTypeSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Creates specific &#x60;document_type&#x60; in &#x60;index_name&#x60; with specified parameters. You should define the parameters correctly as per the getting started guide, else getting the right structure might be an issue.
   * @param indexName Name of the index   * @param docTypeName Name of the document_type   * @param docTypeDetails Details of the document_type
  */
  public void addDocumentType (String indexName, String docTypeName, DocumentType docTypeDetails, final Response.Listener<CreateDocTypeSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = docTypeDetails;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling addDocumentType",
        new ApiException(400, "Missing the required parameter 'indexName' when calling addDocumentType"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling addDocumentType",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling addDocumentType"));
    }
    // verify the required parameter 'docTypeDetails' is set
    if (docTypeDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeDetails' when calling addDocumentType",
        new ApiException(400, "Missing the required parameter 'docTypeDetails' when calling addDocumentType"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateDocTypeSuccess) ApiInvoker.deserialize(localVarResponse,  "", CreateDocTypeSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Creates &#x60;a new index&#x60;.
   * @param indexName Name of the index
   * @return CreateIndexSuccess
  */
  public CreateIndexSuccess addIndex (String indexName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling addIndex",
        new ApiException(400, "Missing the required parameter 'indexName' when calling addIndex"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateIndexSuccess) ApiInvoker.deserialize(localVarResponse, "", CreateIndexSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Creates &#x60;a new index&#x60;.
   * @param indexName Name of the index
  */
  public void addIndex (String indexName, final Response.Listener<CreateIndexSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling addIndex",
        new ApiException(400, "Missing the required parameter 'indexName' when calling addIndex"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateIndexSuccess) ApiInvoker.deserialize(localVarResponse,  "", CreateIndexSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
   * @param indexName Name of the index
   * @param docTypeName Name of the document_type
   * @param docId Document ID
   * @return DeleteDocumentSuccess
  */
  public DeleteDocumentSuccess deleteDocument (String indexName, String docTypeName, String docId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling deleteDocument",
        new ApiException(400, "Missing the required parameter 'indexName' when calling deleteDocument"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling deleteDocument",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling deleteDocument"));
    }
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling deleteDocument",
        new ApiException(400, "Missing the required parameter 'docId' when calling deleteDocument"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString())).replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteDocumentSuccess) ApiInvoker.deserialize(localVarResponse, "", DeleteDocumentSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Deletes &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
   * @param indexName Name of the index   * @param docTypeName Name of the document_type   * @param docId Document ID
  */
  public void deleteDocument (String indexName, String docTypeName, String docId, final Response.Listener<DeleteDocumentSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling deleteDocument",
        new ApiException(400, "Missing the required parameter 'indexName' when calling deleteDocument"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling deleteDocument",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling deleteDocument"));
    }
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling deleteDocument",
        new ApiException(400, "Missing the required parameter 'docId' when calling deleteDocument"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString())).replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteDocumentSuccess) ApiInvoker.deserialize(localVarResponse,  "", DeleteDocumentSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Deletes &#x60;an index&#x60; {index_name}
   * @param indexName Name of the index
   * @return DeleteIndexSuccess
  */
  public DeleteIndexSuccess deleteIndex (String indexName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling deleteIndex",
        new ApiException(400, "Missing the required parameter 'indexName' when calling deleteIndex"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteIndexSuccess) ApiInvoker.deserialize(localVarResponse, "", DeleteIndexSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Deletes &#x60;an index&#x60; {index_name}
   * @param indexName Name of the index
  */
  public void deleteIndex (String indexName, final Response.Listener<DeleteIndexSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling deleteIndex",
        new ApiException(400, "Missing the required parameter 'indexName' when calling deleteIndex"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "writeAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteIndexSuccess) ApiInvoker.deserialize(localVarResponse,  "", DeleteIndexSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60; based on body params. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param indexName Name of the index
   * @param docTypeName Name of the Document_type
   * @param suggest Details of the search query
   * @return SuggestSuccess
  */
  public SuggestSuccess getAdvancedDocTypeSuggestResults (String indexName, String docTypeName, SuggestQuery suggest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = suggest;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAdvancedDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAdvancedDocTypeSuggestResults"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getAdvancedDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getAdvancedDocTypeSuggestResults"));
    }
    // verify the required parameter 'suggest' is set
    if (suggest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'suggest' when calling getAdvancedDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'suggest' when calling getAdvancedDocTypeSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/suggest".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SuggestSuccess) ApiInvoker.deserialize(localVarResponse, "", SuggestSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60; based on body params. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param indexName Name of the index   * @param docTypeName Name of the Document_type   * @param suggest Details of the search query
  */
  public void getAdvancedDocTypeSuggestResults (String indexName, String docTypeName, SuggestQuery suggest, final Response.Listener<SuggestSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = suggest;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAdvancedDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAdvancedDocTypeSuggestResults"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getAdvancedDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getAdvancedDocTypeSuggestResults"));
    }
    // verify the required parameter 'suggest' is set
    if (suggest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'suggest' when calling getAdvancedDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'suggest' when calling getAdvancedDocTypeSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/suggest".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuggestSuccess) ApiInvoker.deserialize(localVarResponse,  "", SuggestSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Gets Suggestions in &#x60;index_name&#x60; limited by the request body fields
   * @param indexName Name of the index
   * @param search Details of the search query
   * @return SuggestSuccess
  */
  public SuggestSuccess getAdvancedIndexSuggestResults (String indexName, SuggestQuery search) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = search;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAdvancedIndexSuggestResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAdvancedIndexSuggestResults"));
    }
    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling getAdvancedIndexSuggestResults",
        new ApiException(400, "Missing the required parameter 'search' when calling getAdvancedIndexSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/suggest".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SuggestSuccess) ApiInvoker.deserialize(localVarResponse, "", SuggestSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Gets Suggestions in &#x60;index_name&#x60; limited by the request body fields
   * @param indexName Name of the index   * @param search Details of the search query
  */
  public void getAdvancedIndexSuggestResults (String indexName, SuggestQuery search, final Response.Listener<SuggestSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = search;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAdvancedIndexSuggestResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAdvancedIndexSuggestResults"));
    }
    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling getAdvancedIndexSuggestResults",
        new ApiException(400, "Missing the required parameter 'search' when calling getAdvancedIndexSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/suggest".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuggestSuccess) ApiInvoker.deserialize(localVarResponse,  "", SuggestSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Advanced Search across multiple indexes specified as a part of the search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param search Details of the search query
   * @return SearchSuccess
  */
  public SearchSuccess getAdvancedMultiIndexSearchResults (IndexesSearchQuery search) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = search;
    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling getAdvancedMultiIndexSearchResults",
        new ApiException(400, "Missing the required parameter 'search' when calling getAdvancedMultiIndexSearchResults"));
    }

    // create path and map variables
    String path = "/indexes/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SearchSuccess) ApiInvoker.deserialize(localVarResponse, "", SearchSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Advanced Search across multiple indexes specified as a part of the search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param search Details of the search query
  */
  public void getAdvancedMultiIndexSearchResults (IndexesSearchQuery search, final Response.Listener<SearchSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = search;

    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling getAdvancedMultiIndexSearchResults",
        new ApiException(400, "Missing the required parameter 'search' when calling getAdvancedMultiIndexSearchResults"));
    }

    // create path and map variables
    String path = "/indexes/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchSuccess) ApiInvoker.deserialize(localVarResponse,  "", SearchSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Gets Suggestions across multiple indexes. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param suggest Details of the suggest query
   * @return SuggestSuccess
  */
  public SuggestSuccess getAdvancedMultiIndexSuggestResults (IndexesSuggestQuery suggest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = suggest;
    // verify the required parameter 'suggest' is set
    if (suggest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'suggest' when calling getAdvancedMultiIndexSuggestResults",
        new ApiException(400, "Missing the required parameter 'suggest' when calling getAdvancedMultiIndexSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/suggest";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SuggestSuccess) ApiInvoker.deserialize(localVarResponse, "", SuggestSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Gets Suggestions across multiple indexes. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param suggest Details of the suggest query
  */
  public void getAdvancedMultiIndexSuggestResults (IndexesSuggestQuery suggest, final Response.Listener<SuggestSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = suggest;

    // verify the required parameter 'suggest' is set
    if (suggest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'suggest' when calling getAdvancedMultiIndexSuggestResults",
        new ApiException(400, "Missing the required parameter 'suggest' when calling getAdvancedMultiIndexSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/suggest".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuggestSuccess) ApiInvoker.deserialize(localVarResponse,  "", SuggestSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param indexName Name of the index
   * @param docTypeName Name of the Document_type
   * @param search Details of the search query
   * @return SearchSuccess
  */
  public SearchSuccess getAdvancedSearchResults (String indexName, String docTypeName, SearchQuery search) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = search;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAdvancedSearchResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAdvancedSearchResults"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getAdvancedSearchResults",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getAdvancedSearchResults"));
    }
    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling getAdvancedSearchResults",
        new ApiException(400, "Missing the required parameter 'search' when calling getAdvancedSearchResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/search".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SearchSuccess) ApiInvoker.deserialize(localVarResponse, "", SearchSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Advanced Search which gets all documents in &#x60;index_name&#x60; for provided search criteria. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param indexName Name of the index   * @param docTypeName Name of the Document_type   * @param search Details of the search query
  */
  public void getAdvancedSearchResults (String indexName, String docTypeName, SearchQuery search, final Response.Listener<SearchSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = search;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAdvancedSearchResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAdvancedSearchResults"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getAdvancedSearchResults",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getAdvancedSearchResults"));
    }
    // verify the required parameter 'search' is set
    if (search == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'search' when calling getAdvancedSearchResults",
        new ApiException(400, "Missing the required parameter 'search' when calling getAdvancedSearchResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/search".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchSuccess) ApiInvoker.deserialize(localVarResponse,  "", SearchSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
   * @param indexName Name of the index
   * @return GetDocTypesSuccess
  */
  public GetDocTypesSuccess getAllDocumentTypes (String indexName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAllDocumentTypes",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAllDocumentTypes"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetDocTypesSuccess) ApiInvoker.deserialize(localVarResponse, "", GetDocTypesSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Gets &#x60;All document_types&#x60; present in &#x60;index_name&#x60;
   * @param indexName Name of the index
  */
  public void getAllDocumentTypes (String indexName, final Response.Listener<GetDocTypesSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getAllDocumentTypes",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getAllDocumentTypes"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetDocTypesSuccess) ApiInvoker.deserialize(localVarResponse,  "", GetDocTypesSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Fetches &#x60;All indexes&#x60; that the user has. Not recommended to be used in production code, as there isn&#39;t that big a Use case for listing all indexes!
   * @return GetIndexesSuccess
  */
  public GetIndexesSuccess getAllIndexes () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/indexes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetIndexesSuccess) ApiInvoker.deserialize(localVarResponse, "", GetIndexesSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Fetches &#x60;All indexes&#x60; that the user has. Not recommended to be used in production code, as there isn&#39;t that big a Use case for listing all indexes!

  */
  public void getAllIndexes (final Response.Listener<GetIndexesSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/indexes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetIndexesSuccess) ApiInvoker.deserialize(localVarResponse,  "", GetIndexesSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
   * @param indexName Name of the index
   * @param q Search Query
   * @return SearchSuccess
  */
  public SearchSuccess getBasicSearchResults (String indexName, String q) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getBasicSearchResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getBasicSearchResults"));
    }
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling getBasicSearchResults",
        new ApiException(400, "Missing the required parameter 'q' when calling getBasicSearchResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/search".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SearchSuccess) ApiInvoker.deserialize(localVarResponse, "", SearchSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Basic Search which gets all documents in &#x60;index_name&#x60; for provided search criteria
   * @param indexName Name of the index   * @param q Search Query
  */
  public void getBasicSearchResults (String indexName, String q, final Response.Listener<SearchSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getBasicSearchResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getBasicSearchResults"));
    }
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling getBasicSearchResults",
        new ApiException(400, "Missing the required parameter 'q' when calling getBasicSearchResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/search".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchSuccess) ApiInvoker.deserialize(localVarResponse,  "", SearchSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param indexName Name of the index
   * @param docTypeName Name of the Document_type
   * @param q Details of the suggest query
   * @return SuggestSuccess
  */
  public SuggestSuccess getDocTypeSuggestResults (String indexName, String docTypeName, String q) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getDocTypeSuggestResults"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getDocTypeSuggestResults"));
    }
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling getDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'q' when calling getDocTypeSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/suggest".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SuggestSuccess) ApiInvoker.deserialize(localVarResponse, "", SuggestSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Gets Suggestions from &#x60;doc_type_name&#x60; in &#x60;index_name&#x60;. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param indexName Name of the index   * @param docTypeName Name of the Document_type   * @param q Details of the suggest query
  */
  public void getDocTypeSuggestResults (String indexName, String docTypeName, String q, final Response.Listener<SuggestSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getDocTypeSuggestResults"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getDocTypeSuggestResults"));
    }
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling getDocTypeSuggestResults",
        new ApiException(400, "Missing the required parameter 'q' when calling getDocTypeSuggestResults"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/suggest".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuggestSuccess) ApiInvoker.deserialize(localVarResponse,  "", SuggestSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Fetches the document referenced by &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
   * @param indexName Name of the index
   * @param docTypeName Name of the document_type
   * @param docId Document ID
   * @return GetDocumentSuccess
  */
  public GetDocumentSuccess getDocument (String indexName, String docTypeName, String docId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getDocument",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getDocument"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getDocument",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getDocument"));
    }
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling getDocument",
        new ApiException(400, "Missing the required parameter 'docId' when calling getDocument"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString())).replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetDocumentSuccess) ApiInvoker.deserialize(localVarResponse, "", GetDocumentSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Fetches the document referenced by &#x60;doc_id&#x60; in &#x60;doc_type_name&#x60; for &#x60;index_name&#x60;
   * @param indexName Name of the index   * @param docTypeName Name of the document_type   * @param docId Document ID
  */
  public void getDocument (String indexName, String docTypeName, String docId, final Response.Listener<GetDocumentSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getDocument",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getDocument"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getDocument",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getDocument"));
    }
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling getDocument",
        new ApiException(400, "Missing the required parameter 'docId' when calling getDocument"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString())).replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetDocumentSuccess) ApiInvoker.deserialize(localVarResponse,  "", GetDocumentSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
   * @param indexName Name of the index
   * @param docTypeName Name of the document_type
   * @return GetDocTypeSuccess
  */
  public GetDocTypeSuccess getDocumentType (String indexName, String docTypeName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getDocumentType",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getDocumentType"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getDocumentType",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getDocumentType"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetDocTypeSuccess) ApiInvoker.deserialize(localVarResponse, "", GetDocTypeSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Checks whether &#x60;document_type&#x60; in &#x60;index_name&#x60; exists
   * @param indexName Name of the index   * @param docTypeName Name of the document_type
  */
  public void getDocumentType (String indexName, String docTypeName, final Response.Listener<GetDocTypeSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getDocumentType",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getDocumentType"));
    }
    // verify the required parameter 'docTypeName' is set
    if (docTypeName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docTypeName' when calling getDocumentType",
        new ApiException(400, "Missing the required parameter 'docTypeName' when calling getDocumentType"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}/document_types/{doc_type_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString())).replaceAll("\\{" + "doc_type_name" + "\\}", apiInvoker.escapeString(docTypeName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetDocTypeSuccess) ApiInvoker.deserialize(localVarResponse,  "", GetDocTypeSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Checks whether &#x60;a particular index&#x60; {index_name} exists
   * @param indexName Name of the index
   * @return GetIndexSuccess
  */
  public GetIndexSuccess getIndex (String indexName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getIndex",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getIndex"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}".replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetIndexSuccess) ApiInvoker.deserialize(localVarResponse, "", GetIndexSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Checks whether &#x60;a particular index&#x60; {index_name} exists
   * @param indexName Name of the index
  */
  public void getIndex (String indexName, final Response.Listener<GetIndexSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexName' is set
    if (indexName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexName' when calling getIndex",
        new ApiException(400, "Missing the required parameter 'indexName' when calling getIndex"));
    }

    // create path and map variables
    String path = "/indexes/{index_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_name" + "\\}", apiInvoker.escapeString(indexName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetIndexSuccess) ApiInvoker.deserialize(localVarResponse,  "", GetIndexSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Returns Similar Documents based on the provided document(s) details. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param algorithm Query defintions
   * @return AlgorithmSuccess
  */
  public AlgorithmSuccess getSimilarDocsResults (AlgorithmSimilarDocsQuery algorithm) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = algorithm;
    // verify the required parameter 'algorithm' is set
    if (algorithm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'algorithm' when calling getSimilarDocsResults",
        new ApiException(400, "Missing the required parameter 'algorithm' when calling getSimilarDocsResults"));
    }

    // create path and map variables
    String path = "/indexes/algorithms/similardocs";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AlgorithmSuccess) ApiInvoker.deserialize(localVarResponse, "", AlgorithmSuccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Returns Similar Documents based on the provided document(s) details. Please ensure you refer the getting started guides, to get the format of the query right.
   * @param algorithm Query defintions
  */
  public void getSimilarDocsResults (AlgorithmSimilarDocsQuery algorithm, final Response.Listener<AlgorithmSuccess> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = algorithm;

    // verify the required parameter 'algorithm' is set
    if (algorithm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'algorithm' when calling getSimilarDocsResults",
        new ApiException(400, "Missing the required parameter 'algorithm' when calling getSimilarDocsResults"));
    }

    // create path and map variables
    String path = "/indexes/algorithms/similardocs".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "authToken", "readAppID" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AlgorithmSuccess) ApiInvoker.deserialize(localVarResponse,  "", AlgorithmSuccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
